/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SnakePack;


import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.Timer;
import java.util.Random;

/**
 *
 * @author roboGOD
 */

class Colors {
    static Color head = Color.RED;
    static Color body = Color.GREEN;
    static Color tail = Color.BLUE;
}

public class start extends javax.swing.JFrame {
    int x;
    int y;
    int z = 0;
    int xinc = 1;
    int yinc = 0;
    int scl = 10;
    int randx, randy, delayMS = 50;
    Random rn = new Random();
    int prevKey = -1;
    int n = 1;
    int score = -10;
    int level = 0;
    int colm;
    int rows;
    ArrayList<Point> tailp;
    Timer timer;
    /**
     * Creates new form start
     */
    public start() {
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
        
        colm = (getHeight()-jLabel1.getHeight()) / scl;
        rows = getWidth() / scl;
        
        x = 5*scl;
        y = 5*scl;
        
        tailp = new ArrayList<>(8);
        tailp.add(new Point(x, y));
        
        timer = new Timer(delayMS, (ActionEvent e) -> {
            start.this.repaint();
        });
        timer.start();
        
        while(randx==0||randx==1||randy==0||randy==1||randx%2==0||randy%2==0) {
            randx = rn.nextInt(rows);
            randy = rn.nextInt(colm);
        }
        randx *= scl;
        randy *= scl;
    }
    
    @Override
    public void paint(Graphics g) {
        try {
            update();
            g.setColor(Color.WHITE);
            g.fillRect(0, 0, getWidth(), getHeight() - jLabel1.getHeight());

            g.setColor(Color.GREEN);
            g.fillOval(randx, randy, scl, scl);
            
            g.setColor(Colors.tail);
            g.fillRect(tailp.get(0).x, tailp.get(0).y, scl, scl);

            g.setColor(Colors.body);
            for (int i = 1; i < n; i++)
                g.fillRect(tailp.get(i).x, tailp.get(i).y, scl, scl);
     
            g.setColor(Colors.head);
            g.fillRect(x, y, scl, scl);
            eats();
        } catch (NullPointerException e) {
        }
    }
    
    public boolean eats() {
        Rectangle r1 = new Rectangle(x, y,scl, scl);
        Rectangle r2= new Rectangle(randx,randy,scl,scl);
        if(r1.intersects(r2) || r1.contains(r2)) {
            randx = rn.nextInt(rows);
            randy = rn.nextInt(colm);    
            while(randx<=1 || randy <= 2|| randx%2==0 || randy%2==0 || isec()) {
                randx = rn.nextInt(rows);
                randy = rn.nextInt(colm);
            }
            randx *= scl;
            randy *= scl;
            n++;
            tailp.add(new Point(x,y));
            return true;
        }
        return false;
    }
    
    public void update() {
        try {
            tailp.remove(0);
            tailp.add(new Point(x, y));

            x += xinc*scl;
            y += yinc*scl;
        
            score = n*scl-10;
            if(score>=1000)
                level = 5;
            else if(score>=750)
                level = 4;
            else if(score>=500)
                level = 3;
            else if(score>=250)
                level = 2;
            else if(score>=100)
                level = 1;
            
            jLabel1.setText("      Level:  "+String.valueOf(level+1)+"       Score:   "+String.valueOf(score));
            
            delayMS = 50 - level*6;
            timer.setDelay(delayMS);
            
            if(x > getWidth()-scl ||y > getHeight()-jLabel1.getHeight()-scl|| x < 0 || y < scl+15 || selfEat()) { 
                try {
                    Thread.sleep(400);
                }
                catch(InterruptedException e){
                }
                timer.stop();
                new home(score).setVisible(true);
                dispose();
            }
        }
        catch (NullPointerException e) {
        }
    }
    public boolean selfEat(){
        try {
            for(int i=0;i<n-1;i++) {
                if(tailp.get(i).x == x  &&  tailp.get(i).y == y)
                    return true;
            }
        }
        catch(NullPointerException e) {
        }
        return false;
    }
    
    public boolean isec() {
        for(int i=0;i<n;i++) {
            if(randx == tailp.get(i).x  &&  randy == tailp.get(i).y)
                return true;
        }
        return false;
    }
   /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Snake!");
        setPreferredSize(new java.awt.Dimension(640, 480));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 445, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
        int keyCode = evt.getKeyCode();
        if(keyCode == KeyEvent.VK_LEFT && prevKey == KeyEvent.VK_RIGHT)
            return;
        else if(keyCode == KeyEvent.VK_RIGHT && prevKey == KeyEvent.VK_LEFT)
            return;
        else if(keyCode == KeyEvent.VK_UP && prevKey == KeyEvent.VK_DOWN)
            return;
        else if(keyCode == KeyEvent.VK_DOWN && prevKey == KeyEvent.VK_UP)
            return;
       
        prevKey = keyCode;
        switch (keyCode) {
            case KeyEvent.VK_UP:
                yinc = -1;
                xinc = 0;
                break;
            case KeyEvent.VK_DOWN:
                yinc = 1;
                xinc = 0;
                break;
            case KeyEvent.VK_LEFT:
                xinc = -1;
                yinc = 0;
                break;
            case KeyEvent.VK_RIGHT:
                xinc = 1;
                yinc = 0;
                break;
            case KeyEvent.VK_SPACE:
                try {
                    n++;
                    if(n==1) {
                        tailp = new ArrayList<>(8);
                    }
                    tailp.add(new Point(x,y));
                }
                catch(NullPointerException e) {
                }
                break;
            default:
                break;
        }
    }//GEN-LAST:event_formKeyPressed

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
    }//GEN-LAST:event_formKeyTyped

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
